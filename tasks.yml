# tasks.yml

variables:
  PIPENV_VENV_IN_PROJECT: 1
shell: bash

# Create virtual environment and install dependencies
setup:
  script:
    - pipenv install --dev
    - echo "pipenv shell"

# Run reportmix inside the virtualenv
mix:
  params:
    - ARGS
  script: pipenv run python reportmix.py $ARGS

# Run unit tests
test:
  script: pipenv run pytest -v

# A basic health check test
healthcheck:
  shell: powershell
  script: ./scripts/Invoke-HealthCheck.ps1

# Run pylint and update score in README.md
lint:
  script:
    - pipenv run pylint reportmix reportmix.py tests setup.py --exit-zero | tee -a .pylint
    - score=`grep -oP "(?<=rated at )([0-9.]+)" .pylint`
    - 'echo "Score: $score"'
    - if [ ! -z "$score" ]; then sed -i -E "8s/pylint-([0-9.]+)-success/pylint-${score}-success/g" README.md; fi
    - rm .pylint

# Build package
package:
  script:
    - python -m pip install --upgrade --quiet setuptools wheel twine
    - python setup.py --quiet sdist bdist_wheel

# Install locally
install:
  script: python setup.py install

# Check and publish to PyPI
publish:
  script:
    - python -m twine check dist/*
    - echo "python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*"
    - echo "python -m twine upload dist/*"

# Release a new version
release:
  shell: powershell
  variables:
    PYPI_PROJECT: "https://pypi.org/project/reportmix"
  params:
    - VERSION
  script:
    - 'echo "Version: $env:VERSION"'
    - 'if ((Get-Content -Raw ./reportmix/main.py) -notlike "*$env:VERSION*") { echo "Update main.py"; exit 1; }'
    - 'try { Invoke-WebRequest "$env:PYPI_PROJECT/$env:VERSION/" -Method HEAD | Out-Null } catch { echo "Publish to PyPI" ; exit 2; }'
    - 'if ((Get-Content -Raw ./CHANGELOG.md) -notlike "*$env:VERSION*") { echo "Update CHANGELOG.md"; exit 3; }'
    - git add .
    - git commit -m "Release $env:VERSION"
    - git tag -a "$env:VERSION" -m "$env:VERSION"
    - echo "git push && git push --tags"

# Clean dist
clean:
  script: rm -r build dist *.egg-info .pytest_cache || true
